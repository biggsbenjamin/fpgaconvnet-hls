#ifndef SINGLE_LAYER_TOP_HPP_
#define SINGLE_LAYER_TOP_HPP_

#define SINGLE_LAYER_BATCH_SIZE   256

#define SINGLE_LAYER_ROWS_IN      28
#define SINGLE_LAYER_COLS_IN      28
#define SINGLE_LAYER_CHANNELS_IN  1

#define SINGLE_LAYER_ROWS_OUT     12
#define SINGLE_LAYER_COLS_OUT     12
#define SINGLE_LAYER_CHANNELS_OUT 20

#define SINGLE_LAYER_STREAMS_IN   1
#define SINGLE_LAYER_STREAMS_OUT  4
#define SINGLE_LAYER_STREAMS_WR   1 

#define SINGLE_LAYER_PORTS        1
#define SINGLE_LAYER_PORTS_IN     1  //SINGLE_LAYER_PORTS
#define SINGLE_LAYER_PORTS_OUT    1  //SINGLE_LAYER_PORTS
#define SINGLE_LAYER_PORTS_WR     1 //SINGLE_LAYER_PORTS

#define SINGLE_LAYER_WEIGHTS_RELOADING_FACTOR 1 
#define SINGLE_LAYER_WEIGHTS_RELOADING_LAYER  conv1
#define SINGLE_LAYER_WEIGHTS_RELOADING_FLAG   1

#define SINGLE_LAYER_SIZE_IN  SINGLE_LAYER_BATCH_SIZE*SINGLE_LAYER_ROWS_IN*SINGLE_LAYER_COLS_IN*DIVIDE(SINGLE_LAYER_CHANNELS_IN,SINGLE_LAYER_STREAMS_IN)
#define SINGLE_LAYER_SIZE_OUT SINGLE_LAYER_BATCH_SIZE*SINGLE_LAYER_ROWS_OUT*SINGLE_LAYER_COLS_OUT*DIVIDE(SINGLE_LAYER_CHANNELS_OUT,SINGLE_LAYER_STREAMS_OUT)*SINGLE_LAYER_WEIGHTS_RELOADING_FACTOR

#include "common.hpp"
#include "conv1.hpp"
#include "pool1.hpp"
#include "squeeze_pool1.hpp"


#if SINGLE_LAYER_WEIGHTS_RELOADING_FLAG
#define SINGLE_LAYER_WR_COARSE_IN     CONV1_COARSE_IN 
#define SINGLE_LAYER_WR_COARSE_OUT    CONV1_COARSE_OUT
#define SINGLE_LAYER_WR_WEIGHTS       CONV1_WEIGHTS
#define SINGLE_LAYER_WR_KERNEL_SIZE   CONV1_KERNEL_SIZE

#define SINGLE_LAYER_SIZE_WR  DIVIDE(SINGLE_LAYER_WR_WEIGHTS,SINGLE_LAYER_STREAMS_WR)

// weights reloading interfaces
#define MODULE_NAME SINGLE_LAYER_WR
#define SINGLE_LAYER_WR_BATCH_SIZE    1
#define SINGLE_LAYER_WR_ROWS_IN       1
#define SINGLE_LAYER_WR_COLS_IN       1
#define SINGLE_LAYER_WR_CHANNELS_IN   SINGLE_LAYER_SIZE_WR
#define SINGLE_LAYER_WR_PORTS_IN      SINGLE_LAYER_PORTS_WR
#define SINGLE_LAYER_WR_STREAMS_IN    SINGLE_LAYER_STREAMS_WR
#define name        single_layer_wr
#include "single_layer_wr_mem_read.hpp"
#undef name        
#define name        single_layer
#include "single_layer_wr.hpp"
#undef name        
#undef MODULE_NAME 

void reload_weights(
    int weights_reloading_index,
    volatile mem_int wr_hw[SINGLE_LAYER_PORTS_WR][SINGLE_LAYER_SIZE_WR],
#if SINGLE_LAYER_WR_KERNEL_SIZE == 1
    weight_t weights[SINGLE_LAYER_WR_COARSE_IN][SINGLE_LAYER_WR_COARSE_OUT][DIVIDE(SINGLE_LAYER_WR_WEIGHTS,SINGLE_LAYER_WR_COARSE_IN*SINGLE_LAYER_WR_COARSE_OUT*SINGLE_LAYER_WR_KERNEL_SIZE*SINGLE_LAYER_WR_KERNEL_SIZE)]
#else
    weight_t weights[SINGLE_LAYER_WR_COARSE_IN][SINGLE_LAYER_WR_COARSE_OUT][DIVIDE(SINGLE_LAYER_WR_WEIGHTS,SINGLE_LAYER_WR_COARSE_IN*SINGLE_LAYER_WR_COARSE_OUT*SINGLE_LAYER_WR_KERNEL_SIZE*SINGLE_LAYER_WR_KERNEL_SIZE)][SINGLE_LAYER_WR_KERNEL_SIZE][SINGLE_LAYER_WR_KERNEL_SIZE]
#endif
);
#endif

// process interfaces
#define MODULE_NAME SINGLE_LAYER
#define name        single_layer
#include "single_layer_mem_read.hpp"
#include "single_layer_mem_write.hpp"
#undef MODULE_NAME 
#undef name        

void process(
    int weights_reloading_index,
    volatile mem_int in_hw[SINGLE_LAYER_PORTS_IN][SINGLE_LAYER_SIZE_IN],
    volatile mem_int out_hw[SINGLE_LAYER_PORTS_OUT][SINGLE_LAYER_SIZE_OUT]
);

void fpgaconvnet_ip(
    int mode,
    int weights_reloading_index,
#if SINGLE_LAYER_WEIGHTS_RELOADING_FLAG
    volatile mem_int wr_hw[SINGLE_LAYER_PORTS_WR][SINGLE_LAYER_SIZE_WR],
#endif
    volatile mem_int in_hw[SINGLE_LAYER_PORTS_IN][SINGLE_LAYER_SIZE_IN],
    volatile mem_int out_hw[SINGLE_LAYER_PORTS_OUT][SINGLE_LAYER_SIZE_OUT]
);

#endif
